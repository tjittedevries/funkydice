{
  "version": 3,
  "sources": ["../src/extractCommandFromString.ts", "../src/totals.ts", "../src/rolls.ts", "../src/rand.ts", "../src/dice.ts", "../src/funkydice.ts"],
  "sourcesContent": ["import { ICommand } from \"./types\";\n\nexport function extractCommandFromString(\n  commandString: string\n): ICommand | undefined {\n  const regex = /^([1-9]\\d*)d([1-9]\\d*|f)([+-]\\d+)?$/gim;\n  const regexResults = regex.exec(commandString);\n\n  if (!regexResults) return undefined;\n\n  const faces = regexResults[2] === \"f\" ? \"f\" : parseInt(regexResults[2], 10);\n  const amount = parseInt(regexResults[1], 10);\n  const modifier = regexResults[3] ? parseInt(regexResults[3], 10) : 0;\n\n  return {\n    amount,\n    faces,\n    modifier,\n  };\n}\n", "export function totals(rolls: number[], modifier: number) {\n  const totalUnmodified = rolls.reduce((acc, current) => acc + current, 0);\n  const total = totalUnmodified + modifier;\n\n  return {\n    total,\n    totalUnmodified,\n  };\n}\n\n\nexport function totalsD66(rolls: number[], modifier: number) {\n  const totalUnmodified = parseInt(`${rolls[0]}${rolls[1]}`, 10);\n  const total = totalUnmodified + modifier;\n\n  return {\n    total,\n    totalUnmodified,\n  };\n}\n\n\n", "import { TDieFn } from \"./types\";\n\nexport function rolls(amount: number, dieFn: TDieFn) {\n  const results: number[] = [];\n\n  for (let i = 0; i < amount; i++) {\n    results.push(dieFn());\n  }\n\n  return results;\n}\n", "export function rand(faces: number): number {\n  return Math.floor(Math.random() * faces) + 1;\n}\n", "import { rand } from \"./rand\";\n\nexport function die(faces: number): () => number {\n  return () => rand(faces);\n}\n\nexport function fateDie(): () => number {\n  return () => {\n    const result = rand(3);\n    if (result === 1) return -1;\n    if (result === 3) return 1;\n    return 0;\n  };\n}\n", "import { IResult } from \"./types\";\nimport { extractCommandFromString } from \"./extractCommandFromString\";\nimport { totals, totalsD66 } from \"./totals\";\nimport { rolls } from \"./rolls\";\nimport { die, fateDie } from \"./dice\";\n\nexport function funkydie(commandString: string): IResult | undefined {\n  const command = extractCommandFromString(commandString);\n  if (!command) return undefined;\n\n  const { amount, faces, modifier } = command;\n\n  let rollResults: number[] = [];\n\n  // Change die for Fate oll\n  if (faces === \"f\") {\n    rollResults = rolls(amount, fateDie());\n  // Change die for D66 roll\n  } else if (faces === 66) {\n    rollResults = rolls(2, die(6));\n  // Roll default\n  } else {\n    rollResults = rolls(amount, die(faces));\n  }\n\n  let total: number\n  let totalUnmodified: number;\n\n  // Calculate results for D66 roll\n  if (faces === 66) {\n    ({ total, totalUnmodified } = totalsD66(rollResults, modifier));\n  // Calculate default\n  } else {\n    ({ total, totalUnmodified } = totals(rollResults, modifier));\n  } \n\n  return {\n    amount,\n    faces,\n    modifier,\n    rolls: rollResults,\n    total,\n    totalUnmodified,\n  };\n}\n\nexport function funkydice(commandString: string): (IResult | undefined)[] {\n  const commands = commandString.split(',');\n  return commands.map((command) => funkydie(command));\n}\n"],
  "mappings": "AAEO,SAASA,EACdC,EACsB,CAEtB,IAAMC,EADQ,yCACa,KAAKD,CAAa,EAE7C,GAAI,CAACC,EAAc,OAEnB,IAAMC,EAAQD,EAAa,KAAO,IAAM,IAAM,SAASA,EAAa,GAAI,EAAE,EACpEE,EAAS,SAASF,EAAa,GAAI,EAAE,EACrCG,EAAWH,EAAa,GAAK,SAASA,EAAa,GAAI,EAAE,EAAI,EAEnE,MAAO,CACL,OAAAE,EACA,MAAAD,EACA,SAAAE,CACF,CACF,CCnBO,SAASC,EAAOC,EAAiBC,EAAkB,CACxD,IAAMC,EAAkBF,EAAM,OAAO,CAACG,EAAKC,IAAYD,EAAMC,EAAS,CAAC,EAGvE,MAAO,CACL,MAHYF,EAAkBD,EAI9B,gBAAAC,CACF,CACF,CAGO,SAASG,EAAUL,EAAiBC,EAAkB,CAC3D,IAAMC,EAAkB,SAAS,GAAGF,EAAM,KAAKA,EAAM,KAAM,EAAE,EAG7D,MAAO,CACL,MAHYE,EAAkBD,EAI9B,gBAAAC,CACF,CACF,CCjBO,SAASI,EAAMC,EAAgBC,EAAe,CACnD,IAAMC,EAAoB,CAAC,EAE3B,QAASC,EAAI,EAAGA,EAAIH,EAAQG,IAC1BD,EAAQ,KAAKD,EAAM,CAAC,EAGtB,OAAOC,CACT,CCVO,SAASE,EAAKC,EAAuB,CAC1C,OAAO,KAAK,MAAM,KAAK,OAAO,EAAIA,CAAK,EAAI,CAC7C,CCAO,SAASC,EAAIC,EAA6B,CAC/C,MAAO,IAAMC,EAAKD,CAAK,CACzB,CAEO,SAASE,GAAwB,CACtC,MAAO,IAAM,CACX,IAAMC,EAASF,EAAK,CAAC,EACrB,OAAIE,IAAW,EAAU,GACrBA,IAAW,EAAU,EAClB,CACT,CACF,CCPO,SAASC,EAASC,EAA4C,CACnE,IAAMC,EAAUC,EAAyBF,CAAa,EACtD,GAAI,CAACC,EAAS,OAEd,GAAM,CAAE,OAAAE,EAAQ,MAAAC,EAAO,SAAAC,CAAS,EAAIJ,EAEhCK,EAAwB,CAAC,EAGzBF,IAAU,IACZE,EAAcC,EAAMJ,EAAQK,EAAQ,CAAC,EAE5BJ,IAAU,GACnBE,EAAcC,EAAM,EAAGE,EAAI,CAAC,CAAC,EAG7BH,EAAcC,EAAMJ,EAAQM,EAAIL,CAAK,CAAC,EAGxC,IAAIM,EACAC,EAGJ,OAAIP,IAAU,GACX,CAAE,MAAAM,EAAO,gBAAAC,CAAgB,EAAIC,EAAUN,EAAaD,CAAQ,EAG5D,CAAE,MAAAK,EAAO,gBAAAC,CAAgB,EAAIE,EAAOP,EAAaD,CAAQ,EAGrD,CACL,OAAAF,EACA,MAAAC,EACA,SAAAC,EACA,MAAOC,EACP,MAAAI,EACA,gBAAAC,CACF,CACF",
  "names": ["extractCommandFromString", "commandString", "regexResults", "faces", "amount", "modifier", "totals", "rolls", "modifier", "totalUnmodified", "acc", "current", "totalsD66", "rolls", "amount", "dieFn", "results", "i", "rand", "faces", "die", "faces", "rand", "fateDie", "result", "funkydie", "commandString", "command", "extractCommandFromString", "amount", "faces", "modifier", "rollResults", "rolls", "fateDie", "die", "total", "totalUnmodified", "totalsD66", "totals"]
}
